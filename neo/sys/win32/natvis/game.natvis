<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="idEntityPtr&lt;*&gt;">
    <DisplayString Condition="spawnId == 0">Eptr (empty)</DisplayString>
    <DisplayString Condition="spawnId != 0">Eptr (num = {spawnId}, spId = {spawnId})</DisplayString>
    <Expand>
      <Synthetic Name="[WRONG]" Condition="spawnId != 0 &amp;&amp; gameLocal.spawnIds[entityId] != spawnId">
        <DisplayString>set = {spawnId} != {gameLocal.spawnIds[entityId]} = stored</DisplayString>
      </Synthetic>
      <Item Name="[entity]" Condition="spawnId != 0">
        gameLocal.entities[entityId]
      </Item>
    </Expand>
  </Type>

  <Type Name="idEntity">
    <DisplayString IncludeView="simple">Entity[{entityNumber}]={name}</DisplayString>
    <DisplayString>Entity {name}: num={entityNumber} def={entityDefNumber}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[Team]">
        <Expand>
          <LinkedListItems>
            <HeadPointer>teamMaster</HeadPointer>
            <NextPointer>teamChain</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="idCVar">
    <DisplayString Condition="internalVar != 0">CVar {((idInternalCVar*)internalVar)->nameString} is: {((idInternalCVar*)internalVar)->valueString}  (default:{((idInternalCVar*)internalVar)->resetString})</DisplayString>
    <DisplayString Condition="internalVar == 0">CVar {name,na} is: {value,na}</DisplayString>
  </Type>
  
  <Type Name="idDeclLocal">
    <DisplayString>Decl {name} from {sourceFile->fileName}</DisplayString>
  </Type>

  <Type Name="idDecl" Inheritable="true">
    <DisplayString>{*base}</DisplayString>
  </Type>

  <Type Name="idDeclFile">
    <DisplayString>DeclFile {fileName}  ({numLines} lines)</DisplayString>
    <Expand>
      <Synthetic Name="[All Decls]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>decls</HeadPointer>
            <NextPointer>nextInFile</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="Note:">
        <DisplayString>expand [Raw View] to see members</DisplayString>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="idEvent">
    <DisplayString Condition="eventdef==&amp;EV_Thread_Execute">idThread::Execute ({time}): {((idThread*)object)->threadName}</DisplayString>
    <DisplayString>{typeinfo->classname,s}::{eventdef->name,s} ({time}): {*object}</DisplayString>
    <Expand HideRawView="true">
      <ExpandedItem>this,!</ExpandedItem>
      <Item Name="[Full Data]">data,[eventdef->argsize]</Item>
    </Expand>
  </Type>

  <Type Name="idVarDef">
    <DisplayString>VarDef {name->name}: {typeDef->type}</DisplayString>
    <Expand>
      <Item Name="[type]">*typeDef</Item>
      <Synthetic Name="[value]">
        <DisplayString Condition="typeDef->type == ev_void">void</DisplayString>
        <DisplayString Condition="typeDef->type == ev_namespace">namespace</DisplayString>
        <DisplayString Condition="initialized == stackVariable">stack[{value.stackOffset}]</DisplayString>
        <!-- Note: showing value is currently impossible for stack variables -->
        <DisplayString Condition="typeDef->type == ev_boolean">{value.intPtr[0] != 0}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_float">{value.floatPtr[0]}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_vector">{value.vectorPtr[0]}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_string">{value.stringPtr,s}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_function">{value.functionPtr[0]}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_virtualfunction">{value.virtualFunction}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_jumpoffset">{value.jumpOffset}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_argsize">{value.argSize}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_field">{value.ptrOffset}</DisplayString>
        <!-- Note: never saw ev_object, ev_entity, ev_scriptevent being non-local -->
        <Expand>
          <ExpandedItem>value</ExpandedItem>
        </Expand>
      </Synthetic>
      <Item Name="initialized">initialized</Item>
      <Synthetic Name="[name]">
        <DisplayString>{name->name}</DisplayString>
        <Expand>
          <ExpandedItem>name</ExpandedItem>
        </Expand>
      </Synthetic>
      <Item Name="scope">scope</Item>
      <Synthetic Name="Note:">
        <DisplayString>expand [Raw View] to see members</DisplayString>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="idTypeDef">
    <DisplayString>{type} {name}</DisplayString>
  </Type>

  <Type Name="statement_s">
    <Expand>
      <Synthetic Name="[op]">
        <DisplayString>{op}:{idCompiler::opcodes[op].opname,sb}</DisplayString>
        <Expand>
          <ExpandedItem>idCompiler::opcodes[op]</ExpandedItem>
        </Expand>
      </Synthetic>
      <Item Name="[a]">*a</Item>
      <Item Name="[b]">*b</Item>
      <Item Name="[c]">*c</Item>
      <Synthetic Name="[file]">
        <DisplayString>{file}:{gameLocal.program.fileList.list[file],s}</DisplayString>
      </Synthetic>
      <Item Name="linenumber">linenumber</Item>
    </Expand>
  </Type>

  <Type Name="emptyCommand_t" Inheritable="false">
    <DisplayString>{commandId}</DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>this</HeadPointer>
        <NextPointer>(emptyCommand_t*)next</NextPointer>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="idMaterial">
    <DisplayString>{*base}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[stages]">
        <Expand>
          <ArrayItems>
            <Size>numStages</Size>
            <ValuePointer>stages</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <!-- this is a bit hacky, but allows to inspect game entity of a render entity
       without having to enumerate all fields of idRenderEntityLocal -->
  <Type Name="renderEntity_s">
    <!-- note: entityNum == 0 means no game entity, i.e. world area or smoke -->
    <DisplayString Condition="entityNum != 0" IncludeView="simple">{*gameLocal.entities[entityNum],view(simple)}</DisplayString>
    <DisplayString Condition="entityNum == 0" IncludeView="simple">{*hModel,view(simple)}</DisplayString>
    <DisplayString Condition="entityNum != 0">renderEntity: {gameLocal.entities[entityNum],view(simple)}</DisplayString>
    <DisplayString Condition="entityNum == 0">renderEntity: {*hModel,view(simple)}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Item Name="[entity]">gameLocal.entities[entityNum]</Item>
    </Expand>
  </Type>
</AutoVisualizer>
